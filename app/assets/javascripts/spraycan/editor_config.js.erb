var Spraycan = {
  Views: {Shared: {}, Themes: {}, ViewOverrides: {}, Stylesheets: {}, Javascripts: {}, Graphics: {} },
  Routers: {},
  Collections: {},

  view: null,

  current: 'html',

  previous: { html: null, css: null, js: null, files: null },

  theme_id: <%= Spraycan::Theme.active.first.id %>,

  theme_name: '<%= Spraycan::Theme.active.first.name %>',

  editor: {minimised: true, maximised: false, visible: false },

  loaded: {view_overrides: false, stylesheets: false, javascripts: false, grahpics: false},

  //holds the last x models opened for each class
  current_collections: { view_overrides: [], javascripts: [], stylesheets: [] }, 

  //holds unsaved models when main collection is being fetched
  new_collections: { view_overrides: [], javascripts: [], stylesheets: [] }, 

  init: function() {
    view_overrides_controller = new Spraycan.Routers.ViewOverrides();

    new Spraycan.Routers.Common();
    new Spraycan.Routers.Themes();
    new Spraycan.Routers.Templates();
    new Spraycan.Routers.Stylesheets();
    new Spraycan.Routers.Javascripts();
    new Spraycan.Routers.Graphics();

    Backbone.history.start();

    Spraycan.refresh_toolbar();

    //ajax activity indicators
    $(document).ajaxSend(function() {
      $('#busy').show();
    });
    $(document).ajaxStop(function() {
      $('#busy').hide();
    });

    //iframe activity indicators
    $(frames[0]).unload(function() {
      $('#busy').show();
    });
    $(frames[0]).load(function() {
      $(frames[0]).unload(function() {
        $('#busy').show();
      });
      $(frames[0]).load(function() {
        $('#busy').hide();
      });

      $('#busy').hide();
    });
  },

  refresh_toolbar: function(){
    new Spraycan.Views.Shared.Toolbar();
  },

  animate_resize: function(){
    var pre_height = $("div#spraycan").height();

    var height = 50;
    if(Spraycan.view!=null){
      height += Spraycan.view.calculate_size();
    }

    if(Spraycan.editor.visible){
      if(Spraycan.editor.minimised){
        $('#nav li#min').addClass('disabled');
        $('#nav li#restore').removeClass('disabled');
        $('#nav li#max').removeClass('disabled');
      }else if(Spraycan.editor.maximised){
        $('#nav li#min').removeClass('disabled');
        $('#nav li#restore').removeClass('disabled');
        $('#nav li#max').addClass('disabled');
      }else{ //restore
        $('#nav li#min').removeClass('disabled');
        $('#nav li#restore').addClass('disabled');
        $('#nav li#max').removeClass('disabled');
      }
    }else{
      $('#nav li#min').addClass('disabled');
      $('#nav li#restore').addClass('disabled');
      $('#nav li#max').addClass('disabled');
    }

    var t = Math.abs((pre_height - height) * 5);
    if(t<400){
      t = 400;
    }else if(t>1500){
      t = 1500;
    }

    $("div#spraycan").animate({height: height + 'px'}, t);
  },

  set_current: function(group, action, model){
    Spraycan.current = group;
    Spraycan.current_action = action;

    $(".nav li").removeClass("active");
    $(".nav li#" + group).addClass("active");

    if(model!=undefined){
      //Spraycan.view = view;

      var collection;

      if(group=='javascripts'){
        collection = Spraycan.current_collections.javascripts;
      }else if(group=='stylesheets'){
        collection = Spraycan.current_collections.stylesheets;
      }else if(group=='view_overrides'){
        collection = Spraycan.current_collections.view_overrides;
      }

      existing = _.find(collection, function(m){ return model.cid == m.cid } )

      if(existing==undefined){
        collection[_.size(collection)] = model;
      }else{
        collection[collection.indexOf(existing)] = model;
      }

      Spraycan.refresh_toolbar();
    }
  },

  reload_frame: function(){
    window.frames[0].location.reload();
  },

  handle_save_error: function(model, errors){
    _.each(errors, function(message, field){
      $("[name='" + field + "']").addClass('error');
      $("[name='" + field + "']").after("<span title='" + message + "' class='error_icon'>E<span>")
    });
  },

  clear_errors: function(){
    $(".error").removeClass("error");
    $(".error_icon").remove();
  },

  ensure_fetched: function(collection){
    if(!Spraycan.loaded[collection]){
      Spraycan.new_collections[collection] = _.select(Spraycan[collection].models, function(model){
        return model.get('id') == undefined;
      });

      Spraycan[collection].fetch({
        error: function() {
          Spraycan.loaded[collection] = false;
          new Error({ message: "Error loading collection." });
        }
      });
    }
  }


};


